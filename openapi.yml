openapi: 3.0.1
info:
  title: Hello API
  description: A simple Hello API
  version: 1.0.0
# servers:
#   - url: /api/v1
paths:
  /hello:
    get:
      summary: Returns a hello message
      responses:
        '200':
          description: A hello message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hello, World!"

  /users:
    post:
      summary: Create a new user
      description: This endpoint allows you to create a new user by providing user details in JSON format.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user.
                  example: "John Doe"
                email:
                  type: string
                  description: The email address of the user.
                  example: "john.doe@example.com"
                age:
                  type: integer
                  description: The age of the user.
                  example: 30
              required:
                - name
                - email
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier for the user.
                    example: "12345"
                  message:
                    type: string
                    example: "User created successfully."
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user data."

    get:
      summary: List all users
      description: This endpoint returns a list of all users.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier for the user.
                      example: "12345"
                    name:
                      type: string
                      description: The name of the user.
                      example: "John Doe"
                    email:
                      type: string
                      description: The email address of the user.
                      example: "john.doe@example.com"
                    age:
                      type: integer
                      description: The age of the user.
                      example: 30

  /users/{id}:
    get:
      summary: Retrieve a user by ID
      description: This endpoint retrieves a user based on their unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier for the user.
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier for the user.
                    example: "12345"
                  name:
                    type: string
                    description: The name of the user.
                    example: "John Doe"
                  email:
                    type: string
                    description: The email address of the user.
                    example: "john.doe@example.com"
                  age:
                    type: integer
                    description: The age of the user.
                    example: 30
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."

    delete:
      summary: Delete a user by ID
      description: This endpoint deletes a user based on their unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier for the user to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found."

  /users/{lastName}:
    get:
      summary: Retrieve users by last name
      description: This endpoint retrieves users with the specified last name.
      parameters:
        - name: lastName
          in: path
          required: true
          description: The last name of the users to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: A list of users with the specified last name
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The unique identifier for the user.
                      example: "12345"
                    name:
                      type: string
                      description: The name of the user.
                      example: "John Doe"
                    email:
                      type: string
                      description: The email address of the user.
                      example: "john.doe@example.com"
                    age:
                      type: integer
                      description: The age of the user.
                      example: 30
        '404':
          description: No users found with that last name
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No users found with the last name 'Doe'."
